"""
Django settings for awmproject project.

Generated by 'django-admin startproject' using Django 4.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

from pathlib import Path
import socket
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

try:
    with open(os.path.join(BASE_DIR, 'secret_key.txt')) as f:
        SECRET_KEY = f.read().strip()
except FileNotFoundError:
    raise Exception("Secret key missing. Please include secret key in base directory.")

# SECURITY WARNING: don't run with debug turned on in production!
#DEBUG = False

ALLOWED_HOSTS = []

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'world',
    'map',
    'django.contrib.gis',
    'lab7', 
    'rest_framework', 
    'leaflet',
    'pwa',
    'lab9',
    'corsheaders',
    'gis_frontend',
]

LEAFLET_CONFIG = {
    "DEFAULT_CENTER": (13.3888599, 52.5170365), 
    "DEFAULT_ZOOM": 16,
    "MIN_ZOOM": 3,
    "MAX_ZOOM": 20,
    "DEFAULT_PRECISION": 6,
    "SCALE": "both",
    "ATTRIBUTION_PREFIX": "powered by <Your corporate name>",
}


MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'awmproject.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'awmproject.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.contrib.gis.db.backends.postgis',
        'NAME': 'gis',
        'HOST': 'postgis',
        'USER': 'docker',
        'PASSWORD': 'docker',
        'PORT': '5432',
    }
}

#GDAL_LIBRARY_PATH = r'C:\Users\dfega\miniconda3\envs\awm_env\Library\bin\gdal.dll'

import os

if socket.gethostname() != "HPLaptop":
    GDAL_LIBRARY_PATH = '/opt/conda/envs/awm_env/lib/libgdal.so'
    os.environ['PROJ_LIB'] = '/opt/conda/envs/awm_env/share/proj'
    DATABASES = {
        'default': {
            'ENGINE': 'django.contrib.gis.db.backends.postgis',
            'NAME': 'gis',
            'HOST': 'postgis',
            'USER': 'docker',
            'PASSWORD': 'docker',
            'PORT': '5432',
        }
    }
else:
    GDAL_LIBRARY_PATH = r'C:\Users\dfega\miniconda3\envs\awm_env\Library\bin\gdal.dll'
    os.environ['PROJ_LIB'] = r'C:\Users\dfega\miniconda3\envs\awm_env\Library\share\proj'
    DATABASES = {
        'default': {
            'ENGINE': 'django.contrib.gis.db.backends.postgis',
            'NAME': 'gis',
            'HOST': 'localhost',
            'USER': 'docker',
            'PASSWORD': 'docker',
            'PORT': '5432',
        }
    }

#STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = '/static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Set DEPLOY_SECURE to True only for LIVE deployment
if socket.gethostname() == "HPLaptop":
    print("HELLO")
    DATABASES["default"]["HOST"] = "localhost"
    #DATABASES["default"]["PORT"] = 5432
    DEBUG = True
    TEMPLATES[0]["OPTIONS"]["debug"] = True
    ALLOWED_HOSTS = ['*']
    CSRF_COOKIE_SECURE = False
    SESSION_COOKIE_SECURE = False
else:
    print("NOT")
    DATABASES["default"]["HOST"] = "postgis"
    #DATABASES["default"]["PORT"] = 5432
    DEBUG = False
    TEMPLATES[0]["OPTIONS"]["debug"] = False
    ALLOWED_HOSTS = ['.dfegan.xyz', 'localhost', 'dfegan.xyz', 'localhost:3000']
    CSRF_COOKIE_SECURE = True
    SESSION_COOKIE_SECURE = True


# Configure PWA settings
PWA_APP_NAME = 'WebMap'
PWA_APP_DESCRIPTION = "A Progressive Web Application for WebMap"
PWA_APP_THEME_COLOR = '#000000'
PWA_APP_BACKGROUND_COLOR = '#ffffff'
PWA_APP_DISPLAY = 'standalone'
PWA_APP_SCOPE = '/'
PWA_APP_START_URL = '/'
PWA_APP_ICONS = [
    {
        'src': '/static/images/pwa-icon.png',
        'sizes': '72x72',
    },
    {
        'src': '/static/images/pwa-icon.png',
        'sizes': '152x152',
    },
    {
        'src': '/static/images/pwa-icon.png',
        'sizes': '1920x1080',
    },
]
PWA_APP_ICONS_APPLE = [
    {
        'src': '/static/images/pwa-icon.png',
        'sizes': '152x152',
    },
]
PWA_APP_SPLASH_SCREEN = [
    {
        'src': '/static/images/pwa-icon.png',
        'media': '(device-width: 320px) and (device-height: 568px)',
    },
    {
        'src': '/static/images/pwa-icon.png',
        'media': '(device-width: 1920px) and (device-height: 1080px)',
    },
]
PWA_APP_DIR = 'ltr'
PWA_APP_LANG = 'en-US'

from corsheaders.defaults import default_headers

CORS_ALLOW_CREDENTIALS = True 
CORS_ORIGIN_ALLOW_ALL = True
CORS_ORIGIN_WHITELIST = [
    'http://localhost/',
    'http://localhost:80',
    'http://localhost:8000',
    'http://127.0.0.1:8000',
    'http://127.0.0.1:3000/',
    'http://localhost:3000/',
]

CSRF_TRUSTED_ORIGINS = [
    'http://localhost/',  
    'http://localhost:80',
    'http://localhost:8000',
    'http://127.0.0.1:8000',
    'http://127.0.0.1:3000/',
    'http://localhost:3000/',
]

CORS_ALLOWED_ORIGINS = [
    'http://localhost/',  
    'http://localhost:80',
    'http://localhost:8000',
    'http://127.0.0.1:8000',
    'http://127.0.0.1:3000/',
    'http://localhost:3000/',
]

CORS_ALLOW_CREDENTIALS = True
CSRF_COOKIE_HTTPONLY = False
CSRF_COOKIE_SECURE = False

import logging

logging.basicConfig(
    level=logging.DEBUG,
    format="%(asctime)s [%(levelname)s] %(message)s",
)